<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RoomService</name>
    </assembly>
    <members>
        <member name="T:RoomService.Controllers.AbstractMongoCrudController`2">
            <summary>
            Abstract Crud Controller crud ops are virtual
            </summary>
            <typeparam name="TModel">A Target class model type</typeparam>
            <typeparam name="TService">Service type that carries out the Crud ops</typeparam>
        </member>
        <member name="P:RoomService.Controllers.AbstractMongoCrudController`2.Service">
            <summary>
            Service ref
            </summary>
        </member>
        <member name="M:RoomService.Controllers.AbstractMongoCrudController`2.#ctor(`1)">
            <summary>
            Constructor
            </summary>
            <param name="service">Injected service</param>
        </member>
        <member name="M:RoomService.Controllers.AbstractMongoCrudController`2.Create(`0)">
            <summary>
            Create op
            </summary>
            <param name="model">Json serialized TModel type in Body</param>
        </member>
        <member name="M:RoomService.Controllers.AbstractMongoCrudController`2.Delete(System.String)">
            <summary>
            Delete op
            </summary>
            <param name="id">The id : 24 string to delete</param>
            <returns>True : success,  false : else</returns>
        </member>
        <member name="M:RoomService.Controllers.AbstractMongoCrudController`2.GetAll">
            <summary>
            Result of Action
            </summary>
            <returns>Forbid,Not Found,new Object Result</returns>
        </member>
        <member name="M:RoomService.Controllers.AbstractMongoCrudController`2.Read(System.String)">
            <summary>
            get op
            </summary>
            <param name="id">The id : 24 string to Read</param>
            <returns> The json serialized object eventually default</returns>
        </member>
        <member name="M:RoomService.Controllers.AbstractMongoCrudController`2.Update(System.String,`0)">
            <summary>
            Update op
            </summary>
            <param name="id"> Target resource id</param>
            <param name="model"> the new Json serialized TModel type in Body</param>
            <returns>True : success, false : else</returns>
        </member>
        <member name="M:RoomService.Controllers.AbstractMongoCrudController`2.CanCreate(System.String,`0)">
            <summary>
            Can Create
            </summary>
            <param name="id"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.AbstractMongoCrudController`2.CanRead(System.String,System.String)">
            <summary>
            Can Read
            </summary>
            <param name="id"></param>
            <param name="tid"></param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.AbstractMongoCrudController`2.CanUpdate(System.String,`0)">
            <summary>
            Can Update
            </summary>
            <param name="id"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.AbstractMongoCrudController`2.CanDelete(System.String,System.String)">
            <summary>
            Can Delete
            </summary>
            <param name="id"></param>
            <param name="tid"></param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.AbstractMongoCrudController`2.CanReadAll(System.String)">
            <summary>
            Can Read All
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:RoomService.Controllers.BuildingController">
            <summary>
            Controller for building collection base Crud in Abstract Class
            </summary>
        </member>
        <member name="M:RoomService.Controllers.BuildingController.#ctor(RoomService.Services.BuildingService,RoomService.Services.AccessControlService)">
            <summary>
            Building of Controller
            </summary>
            <param name="service">Building Service</param>
            <param name="acs">Access Control Service</param>
        </member>
        <member name="M:RoomService.Controllers.BuildingController.GetBuildingSpaces(System.String)">
            <summary>
            Spaces of Buildinn
            </summary>
            <param name="id">lenght 24</param>
            <returns>Forbid, not Found</returns>
        </member>
        <member name="M:RoomService.Controllers.BuildingController.CheckAvailability(System.String,System.Int64,System.Int64)">
            <summary>
            Availability of Check
            </summary>
            <param name="id">string id</param>
            <param name="ms1"></param>
            <param name="ms2"></param>
            <returns>Forbid, not Found</returns>
        </member>
        <member name="M:RoomService.Controllers.BuildingController.CanCreate(System.String,RoomService.Models.Building)">
            <summary>
            Can Create
            </summary>
            <param name="id"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.BuildingController.CanDelete(System.String,System.String)">
            <summary>
            Can Delete
            </summary>
            <param name="id"></param>
            <param name="tid"></param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.BuildingController.CanRead(System.String,System.String)">
            <summary>
            Can Read
            </summary>
            <param name="id"></param>
            <param name="tid"></param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.BuildingController.CanReadAll(System.String)">
            <summary>
            Can Real All
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.BuildingController.CanUpdate(System.String,RoomService.Models.Building)">
            <summary>
            Can Update
            </summary>
            <param name="id"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:RoomService.Controllers.FavouritesController">
            <summary>
            Controller for favourites collection base Crud in abstract class
            </summary>
        </member>
        <member name="F:RoomService.Controllers.FavouritesController._acs">
            <summary>
            acs as AccessControlService
            </summary>
        </member>
        <member name="M:RoomService.Controllers.FavouritesController.#ctor(RoomService.Services.FavouritesService,RoomService.Services.AccessControlService)">
            <summary>
            Controller for favourites collection
            </summary>
            <param name="service">Favourite service</param>
            <param name="acs">Access Control Service</param>
        </member>
        <member name="M:RoomService.Controllers.FavouritesController.CanCreate(System.String,RoomService.Models.Favourites)">
            <summary>
            Create
            </summary>
            <param name="id">string id</param>
            <param name="model">favourites model</param>
            <returns>Owner(id,model)</returns>
        </member>
        <member name="M:RoomService.Controllers.FavouritesController.CanDelete(System.String,System.String)">
            <summary>
            Delete
            </summary>
            <param name="id">string id</param>
            <param name="tid">string tid</param>
            <returns>Owner(id,tid,Service)</returns>
        </member>
        <member name="M:RoomService.Controllers.FavouritesController.CanRead(System.String,System.String)">
            <summary>
            Can Read
            </summary>
            <param name="id">string id</param>
            <param name="tid">string tid</param>
            <returns>Owner(id,tid,Service)</returns>
        </member>
        <member name="M:RoomService.Controllers.FavouritesController.CanReadAll(System.String)">
            <summary>
            Read All
            </summary>
            <param name="id">string id</param>
            <returns>id Admin</returns>
        </member>
        <member name="M:RoomService.Controllers.FavouritesController.CanUpdate(System.String,RoomService.Models.Favourites)">
            <summary>
            Update
            </summary>
            <param name="id">String id</param>
            <param name="model">Favourites model</param>
            <returns>Is Owner</returns>
        </member>
        <member name="T:RoomService.Controllers.IMongoCrudController`1">
            <summary>
            Interface for generic CRUD ops controller
            </summary>
            <typeparam name="TModel">A Target class model type</typeparam>
        </member>
        <member name="M:RoomService.Controllers.IMongoCrudController`1.GetAll">
            <summary>
            Result Action Get All
            </summary>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.IMongoCrudController`1.Create(`0)">
            <summary>
            Result Action Create
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.IMongoCrudController`1.Read(System.String)">
            <summary>
            Result Action Read
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.IMongoCrudController`1.Update(System.String,`0)">
            <summary>
            Result ActionUpdate
            </summary>
            <param name="id"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Controllers.IMongoCrudController`1.Delete(System.String)">
            <summary>
            Result Action Delete
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:RoomService.Controllers.ReservationController">
            <summary>
            Controller for Reservation collection base Crud in abstract class
            </summary>
        </member>
        <member name="M:RoomService.Controllers.ReservationController.#ctor(RoomService.Services.ReservationService,RoomService.Services.AccessControlService,RoomService.Services.ReservationUpdaterService)">
            <summary>
            Controller of Reservation
            </summary>
            <param name="service">ReservationService</param>
            <param name="acs">AccessControlService</param>
            <param name="rus">ReservationUpdaterService</param>
        </member>
        <member name="M:RoomService.Controllers.ReservationController.GetUserReservations(System.String)">
            <summary>
            Reservation User
            </summary>
            <param name="id">length 24</param>
            <returns>Bad Request, Forbid, new Object Result</returns>
        </member>
        <member name="M:RoomService.Controllers.ReservationController.CheckIn(RoomService.DTO.WorkSpaceDateDTO)">
            <summary>
            Checkin
            </summary>
            <param name="data">WorkspaceDateDTO</param>
            <returns>Not Found,Forbid,Bad Request</returns>
        </member>
        <member name="M:RoomService.Controllers.ReservationController.CheckOut(RoomService.DTO.WorkSpaceDateDTO)">
            <summary>
            Checkout
            </summary>
            <param name="data">WorkSpaceDate</param>
            <returns> Not Found, Forbid, Bad Request</returns>
        </member>
        <member name="M:RoomService.Controllers.ReservationController.GetReservationMeta(System.String)">
            <summary>
            ReservationMeta
            </summary>
            <param name="id">The user id : 24 string</param>
            <returns>Forbid, new Object Result></returns>
        </member>
        <member name="M:RoomService.Controllers.ReservationController.GetUserReservationsAndWorkSpaces(System.String)">
            <summary>
            Reservation and WorkSpaces User(String id)
            </summary>
            <param name="id">The user id : 24 string</param>
            <returns>Forbid, new Object Result</returns>
            
        </member>
        <member name="M:RoomService.Controllers.ReservationController.Create(RoomService.Models.Reservation)">
            <summary>
            Create
            </summary>
            <param name="model">Reservation model</param>
            <returns>Forbid,Bad Request,new Object Result</returns>
        </member>
        <member name="M:RoomService.Controllers.ReservationController.CanCreate(System.String,RoomService.Models.Reservation)">
            <summary>
            CanCreate
            </summary>
            <param name="id">string id</param>
            <param name="model">Reservation model</param>
            <returns>CreateReservation(id,model)</returns>
        </member>
        <member name="M:RoomService.Controllers.ReservationController.CanDelete(System.String,System.String)">
            <summary>
            Can Delete
            </summary>
            <param name="id">string id</param>
            <param name="tid">string tid</param>
            <returns>Reservation Service(id,tid,Service)</returns>
        </member>
        <member name="M:RoomService.Controllers.ReservationController.CanRead(System.String,System.String)">
            <summary>
            Can Read
            </summary>
            <param name="id">string id</param>
            <param name="tid">string tid</param>
            <returns>Id Auth</returns>
        </member>
        <member name="M:RoomService.Controllers.ReservationController.CanReadAll(System.String)">
            <summary>
            Can Read All
            </summary>
            <param name="id">string id</param>
            <returns>id Admin</returns>
        </member>
        <member name="M:RoomService.Controllers.ReservationController.CanUpdate(System.String,RoomService.Models.Reservation)">
            <summary>
            Can Update
            </summary>
            <param name="id">string id</param>
            <param name="model">Reservation model</param>
            <returns>Owner(id,model)</returns>
        </member>
        <member name="T:RoomService.Controllers.UserController">
            <summary>
            Controller for User collection base Crud in abstract class
            </summary>
        </member>
        <member name="F:RoomService.Controllers.UserController._acs">
            <summary>
            acs AccessControlService
            </summary>
        </member>
        <member name="M:RoomService.Controllers.UserController.#ctor(RoomService.Services.UserService,RoomService.Services.AccessControlService)">
            <summary>
            UserController
            </summary>
            <param name="service">service UserService</param>
            <param name="acs">acs AccessControlService</param>
        </member>
        <member name="M:RoomService.Controllers.UserController.FindUserLocation(System.String)">
            <summary>
            Find an user
            </summary>
            <param name="id">The user id : 24 string</param>
            <returns>if null result not Found, new ok Object Result</returns>
        </member>
        <member name="M:RoomService.Controllers.UserController.GetUserInWorkSpace(System.String)">
            <summary>
            In Work Space
            </summary>
            <param name="id">The id : 24 string</param>
            <returns>if null result not Found, new ok Object Result</returns>
        </member>
        <member name="M:RoomService.Controllers.UserController.Read(System.String)">
            <summary>
            Secure user data get
            </summary>
            <param name="id">The user id</param>
            <returns>the user hiding password</returns>
        </member>
        <member name="M:RoomService.Controllers.UserController.GetAll">
            <summary>
            Secure user data get
            </summary>
            <returns>if null Bad Request, new Ok Object Result</returns>
        </member>
        <member name="M:RoomService.Controllers.UserController.GenerateToken(RoomService.DTO.AuthDTO)">
            <summary>
            Token Generation request
            </summary>
            <param name="model">Login data model</param>
            <returns>Generated token</returns>
        </member>
        <member name="M:RoomService.Controllers.UserController.Registration(RoomService.Models.UserModel)">
            <summary>
            Registration Request
            </summary>
            <param name="model">User model to create</param>
            <returns>New created user</returns>
        </member>
        <member name="M:RoomService.Controllers.UserController.GetUserFavouritesRooms(System.String)">
            <summary>
            Gets the user favourite workspaces
            </summary>
            <param name="id">The id of the user</param>
            <returns>The user favorurite WorkSpaces</returns>
        </member>
        <member name="M:RoomService.Controllers.UserController.CanCreate(System.String,RoomService.Models.UserModel)">
            <summary>
            Can Create
            </summary>
            <param name="id">String id</param>
            <param name="model">model UserModel</param>
            <returns>acs Can Create User(id,model)</returns>
        </member>
        <member name="M:RoomService.Controllers.UserController.CanRead(System.String,System.String)">
            <summary>
            Can Read
            </summary>
            <param name="id">String id</param>
            <param name="tid">String tid</param>
            <returns>acs Is Auth(id)</returns>
        </member>
        <member name="M:RoomService.Controllers.UserController.CanUpdate(System.String,RoomService.Models.UserModel)">
            <summary>
            Can Update
            </summary>
            <param name="id">String id</param>
            <param name="model">model UserModel</param>
            <returns>acs Is Owner(id,model)</returns>
        </member>
        <member name="M:RoomService.Controllers.UserController.CanDelete(System.String,System.String)">
            <summary>
            Can Delete
            </summary>
            <param name="id">String id</param>
            <param name="tid">String tid</param>
            <returns>acs Is Owner(id,tid,Service)</returns>
        </member>
        <member name="M:RoomService.Controllers.UserController.CanReadAll(System.String)">
            <summary>
            Can Read All
            </summary>
            <param name="id">String id</param>
            <returns>acs Is Auth(id)</returns>
        </member>
        <member name="T:RoomService.Controllers.WorkSpaceController">
            <summary>
            Controller for workspace collection base Crud in abstract class
            </summary>
        </member>
        <member name="F:RoomService.Controllers.WorkSpaceController._acs">
            <summary>
            acs as AccessControlService
            </summary>
        </member>
        <member name="M:RoomService.Controllers.WorkSpaceController.#ctor(RoomService.Services.WorkSpaceService,RoomService.Services.AccessControlService)">
            <summary>
            WorkSpaceController
            </summary>
            <param name="service">WorkSpaceService</param>
            <param name="acs">AccessControlService</param>
        </member>
        <member name="M:RoomService.Controllers.WorkSpaceController.CanCreate(System.String,RoomService.Models.WorkSpace)">
            <summary>
            Can Create
            </summary>
            <param name="id">String id</param>
            <param name="model">WorkSpace model</param>
            <returns>acs is Auth(id)</returns>
        </member>
        <member name="M:RoomService.Controllers.WorkSpaceController.CanDelete(System.String,System.String)">
            <summary>
            Can Delete
            </summary>
            <param name="id">String id</param>
            <param name="tid">String tid</param>
            <returns>acs Is Admin(id)</returns>
        </member>
        <member name="M:RoomService.Controllers.WorkSpaceController.CanRead(System.String,System.String)">
            <summary>
            Can Read
            </summary>
            <param name="id">String id</param>
            <param name="tid">String tid</param>
            <returns>acs Is Auth(id)</returns>
        </member>
        <member name="M:RoomService.Controllers.WorkSpaceController.CanReadAll(System.String)">
            <summary>
            Can Read All
            </summary>
            <param name="id">String id</param>
            <returns>acs is Auth(id)</returns>
        </member>
        <member name="M:RoomService.Controllers.WorkSpaceController.CanUpdate(System.String,RoomService.Models.WorkSpace)">
            <summary>
            Can Update
            </summary>
            <param name="id">String id</param>
            <param name="model">Workspace model</param>
            <returns>acs Is Admin(id)</returns>
        </member>
        <member name="T:RoomService.Models.Building">
            <summary>
            Model for building data
            </summary>
        </member>
        <member name="P:RoomService.Models.Building.Id">
            <summary>
            Id <see cref="P:RoomService.Models.IModel.Id"/>
            </summary>
        </member>
        <member name="P:RoomService.Models.Building.Name">
            <summary>
            The Building name
            </summary>
        </member>
        <member name="P:RoomService.Models.Building.Map">
            <summary>
            The building Map
            </summary>
        </member>
        <member name="T:RoomService.Models.Favourites">
            <summary>
            Model for Favourites data
            </summary>
        </member>
        <member name="P:RoomService.Models.Favourites.Id">
            <summary>
            Id <see cref="P:RoomService.Models.IModel.Id"/>
            </summary>
        </member>
        <member name="P:RoomService.Models.Favourites.Target">
            <summary>
            Target resource favourited in this case refers WorkSpace
            <see cref="T:RoomService.Models.WorkSpace"/>
            </summary>
        </member>
        <member name="P:RoomService.Models.Favourites.Owner">
            <summary>
            Owner of the Favourite in this case the User
            <see cref="T:RoomService.Models.UserModel"/>
            <seealso cref="T:RoomService.Models.IOwnable"/>
            </summary>
        </member>
        <member name="P:RoomService.Models.Favourites.Last">
            <summary>
            Bool indicating if this liked was last reserved WorkSpace by owner
            </summary>
        </member>
        <member name="P:RoomService.Models.Favourites.UsageTimes">
            <summary>
            Times the Favourite were used 
            Prop for favoutirs sorting
            </summary>
        </member>
        <member name="T:RoomService.Models.IModel">
            <summary>
            Model for compaibility interface in generic use
            </summary>
        </member>
        <member name="P:RoomService.Models.IModel.Id">
            <summary>
            Id all models on mongo db must have an Id
            </summary>
        </member>
        <member name="T:RoomService.Models.IOwnable">
            <summary>
            Interface for Ownable data
            </summary>
        </member>
        <member name="P:RoomService.Models.IOwnable.Owner">
            <summary>
            String Owner
            </summary>
        </member>
        <member name="T:RoomService.Models.Reservation">
            <summary>
            Model for reservation data
            </summary>
        </member>
        <member name="T:RoomService.Models.Reservation.Statuses">
            <summary>
            Reservation status of users
            <para>
                Attiva  when the start-time is before the current time and whose end-time is after the current time
                In-Corso when the reservation is in force
                Conclusa ended when checkout is done
                Checkin when the user uses the booked service 
                Cancellata when the user cancels his reservation
            </para>
            </summary>
        </member>
        <member name="F:RoomService.Models.Reservation.Statuses.ATTIVA">
            <summary>
            Active reservation status
            </summary>
        </member>
        <member name="F:RoomService.Models.Reservation.Statuses.INCORSO">
            <summary>
            Running reservation status but not checked in
            </summary>
        </member>
        <member name="F:RoomService.Models.Reservation.Statuses.CONCLUSA">
            <summary>
            Completed reservation status
            </summary>
        </member>
        <member name="F:RoomService.Models.Reservation.Statuses.CHECKIN">
            <summary>
            Checked in reservation
            </summary>
        </member>
        <member name="F:RoomService.Models.Reservation.Statuses.CANCELLATA">
            <summary>
            Deleted reservation
            </summary>
        </member>
        <member name="P:RoomService.Models.Reservation.Id">
            <summary>
            Id <see cref="T:RoomService.Models.IModel"/>
            </summary>
        </member>
        <member name="P:RoomService.Models.Reservation.Status">
            <summary>
            Status
            Required reservation status prop
            </summary>
        </member>
        <member name="P:RoomService.Models.Reservation.CheckIn">
            <summary>
            Performed Checkin
            </summary>
        </member>
        <member name="P:RoomService.Models.Reservation.CheckOut">
            <summary>
            Performed Checkout
            </summary>
        </member>
        <member name="P:RoomService.Models.Reservation.Owner">
            <summary>
            Owner in this case the user of the reservation
            Refers the UserId
            <see cref="T:RoomService.Models.IOwnable"/>
            <seealso cref="T:RoomService.Models.UserModel"/>
            </summary>
        </member>
        <member name="P:RoomService.Models.Reservation.Target">
            <summary>
            Target refers the WorkSpace Id
            <see cref="T:RoomService.Models.WorkSpace"/>
            @TODO: ITargetable?
            </summary>
        </member>
        <member name="P:RoomService.Models.Reservation.Interval">
            <summary>
            Interval of DeltaTime describes the reservation start and end day/hour
            </summary>
        </member>
        <member name="P:RoomService.Models.Reservation.ReservationSocket">
            <summary>
            Refers WorkSpaceReservations Id
            the reservation instance in workspace and deltatime context
            <see cref="T:RoomService.Models.WorkSpaceReservation"/>
            </summary>
        </member>
        <member name="T:RoomService.Models.Types.DeltaTime">
            <summary>
            Booking times intervals for buildings and workSpaces
            </summary>
        </member>
        <member name="P:RoomService.Models.Types.DeltaTime.StartTime">
            <summary>
            StartTime Date in ISO 8601 format
            </summary>
        </member>
        <member name="P:RoomService.Models.Types.DeltaTime.EndTime">
            <summary>
            EndTime Date in ISO 8601 format
            </summary>
        </member>
        <member name="M:RoomService.Models.Types.DeltaTime.Equals(System.Object)">
            <summary>
            Equals override
            </summary>
            <param name="obj">Other object to evalutate</param>
            <returns>Cast the object to self type and return true if all fields matchs</returns>
        </member>
        <member name="M:RoomService.Models.Types.DeltaTime.GetHashCode">
            <summary>
            Get HashCode needed override
            </summary>
            <returns></returns>
        </member>
        <member name="T:RoomService.Models.Types.Point2d">
            <summary>
            Point2d data container class
            </summary>
        </member>
        <member name="P:RoomService.Models.Types.Point2d.X">
            <summary>
            The X coord
            </summary>
        </member>
        <member name="P:RoomService.Models.Types.Point2d.Y">
            <summary>
            The Y coord
            </summary>
        </member>
        <member name="T:RoomService.Models.UserModel">
            <summary>
            Model for user data
            </summary>
        </member>
        <member name="T:RoomService.Models.UserModel.UserTypes">
            <summary>
            UserTypes
            </summary>
        </member>
        <member name="F:RoomService.Models.UserModel.UserTypes.USER">
            <summary>
            User who is given the opportunity to reserve a seat in the WorkSpace to which access is provided
            </summary>
        </member>
        <member name="F:RoomService.Models.UserModel.UserTypes.ADMIN">
            <summary>
            Admin which configures, manages and maintains the reservation of jobs and meeting WorkSpaces
            </summary>
        </member>
        <member name="P:RoomService.Models.UserModel.Id">
            <summary>
            Id <see cref="P:RoomService.Models.IModel.Id"/>
            </summary>
        </member>
        <member name="P:RoomService.Models.UserModel.Username">
            <summary>
            Username this field is also a key in the database
            </summary>
        </member>
        <member name="P:RoomService.Models.UserModel.Password">
            <summary>
            Password this field is stored encrypted in db and removed in responses
            Un valued properties are simply ignored
            </summary>
        </member>
        <member name="P:RoomService.Models.UserModel.Token">
            <summary>
            Token this field is excluded in database is used for user identification on API calls
            Un valued properties are simply ignored
            </summary>
        </member>
        <member name="P:RoomService.Models.UserModel.Photo">
            <summary>
            Photo url to user picture/avatar
            Un valued properties are simply ignored
            </summary>
        </member>
        <member name="P:RoomService.Models.UserModel.UserType">
            <summary>
            User identification type
            </summary>
        </member>
        <member name="P:RoomService.Models.UserModel.Owner">
            <summary>
            Owner of the resource user are self owned // own their profile
            <see cref="T:RoomService.Models.IOwnable"/>
            </summary>
        </member>
        <member name="T:RoomService.Models.WorkSpace">
            <summary>
            Model for workspace data
            </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpace.Id">
            <summary>
            Id <see cref="P:RoomService.Models.IModel.Id"/>
            </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpace.Name">
            <summary>
            Name of the workspace
            Un valued properties are simply ignored
            </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpace.Features">
            <summary>
            WorkSpace feature enumerable
            </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpace.AllSeats">
            <summary>
            Maximum WorkSpace available seats
            </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpace.SubMap">
            <summary>
            SubMap url to svg used for map the area
            Un valued properties are simply ignored
            </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpace.Building">
            <summary>
            Ref Building used for aggregate with building 
            <see cref="M:RoomService.Models.Building.#ctor"/>
            </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpace.Pivot">
            <summary>
            Pivot of Point2d where to stick the svg in map
            <see cref="T:RoomService.Models.Types.Point2d"/>
            </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpace.Owner">
            <summary>
            Owner of the resource in this case the building where the workspace is
            <see cref="T:RoomService.Models.IOwnable"/>
            </summary>
        </member>
        <member name="T:RoomService.Models.WorkSpaceReservation">
            <summary>
            Service for WorSpace
            </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpaceReservation.Id">
            <summary>
            Id <see cref="P:RoomService.Models.IModel.Id"/>
            </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpaceReservation.Interval">
            <summary>
            The ref interval of time the resource refers
            </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpaceReservation.Owner">
            <summary>
            Owner of the resource in this case the WorkSpace
            <see cref="T:RoomService.Models.IOwnable"/>
            <seealso cref="T:RoomService.Models.WorkSpace"/>
             </summary>
        </member>
        <member name="P:RoomService.Models.WorkSpaceReservation.Reservations">
            <summary>
            Counter of current reservations
            </summary>
        </member>
        <member name="T:RoomService.DTO.AuthDTO">
            <summary>
            Login data with Username and Password
            </summary>
        </member>
        <member name="P:RoomService.DTO.AuthDTO.Username">
            <summary>
            String Username
            </summary>
        </member>
        <member name="P:RoomService.DTO.AuthDTO.Password">
            <summary>
            String Password
            </summary>
        </member>
        <member name="T:RoomService.DTO.BuildingAvailabilityDTO">
            <summary>
            Availability of Building DTO
            </summary>
        </member>
        <member name="P:RoomService.DTO.BuildingAvailabilityDTO.TargetBuilding">
            <summary>
            Target Building
            </summary>
        </member>
        <member name="P:RoomService.DTO.BuildingAvailabilityDTO.Available">
            <summary>
            Available WorkSpaces
            </summary>
        </member>
        <member name="T:RoomService.DTO.BuildingWorkSpaceDTO">
            <summary>
            Possibility to choose between various spaces and buildings
            </summary>
        </member>
        <member name="P:RoomService.DTO.BuildingWorkSpaceDTO.Building">
            <summary>
            The Building Data
            </summary>
        </member>
        <member name="P:RoomService.DTO.BuildingWorkSpaceDTO.WorkSpaces">
            <summary>
            The WorkSpaces in the building
            </summary>
        </member>
        <member name="T:RoomService.DTO.FoundUserWorkSpaceDTO">
            <summary>
            Work Space User
            </summary>
        </member>
        <member name="P:RoomService.DTO.FoundUserWorkSpaceDTO.User">
            <summary>
            User 
            </summary>
        </member>
        <member name="P:RoomService.DTO.FoundUserWorkSpaceDTO.WorkSpaceReservation">
            <summary>
            Reservation of WorkSpace
            </summary>
        </member>
        <member name="T:RoomService.DTO.UserFavouriteWorkSpaceDTO">
            <summary>
            User Favourite workSpace aggregation
            <see cref="T:RoomService.Models.UserModel"/>
            <see cref="T:RoomService.DTO.UserFavouriteWorkSpaceDTO.FavouriteWorkSpaceDTO"/>
            <seealso cref="T:RoomService.Models.WorkSpace"/>
            </summary>
        </member>
        <member name="T:RoomService.DTO.UserFavouriteWorkSpaceDTO.FavouriteWorkSpaceDTO">
            <summary>
            Subclass for favourite collection
            </summary>
        </member>
        <member name="P:RoomService.DTO.UserFavouriteWorkSpaceDTO.FavouriteWorkSpaceDTO.Favourite">
            <summary>
            The favourite
            </summary>
        </member>
        <member name="P:RoomService.DTO.UserFavouriteWorkSpaceDTO.FavouriteWorkSpaceDTO.WorkSpace">
            <summary>
            The WorkSpace
            </summary>
        </member>
        <member name="P:RoomService.DTO.UserFavouriteWorkSpaceDTO.User">
            <summary>
            The user
            </summary>
        </member>
        <member name="P:RoomService.DTO.UserFavouriteWorkSpaceDTO.Favourites">
            <summary>
            Favourites workSpaces
            </summary>
        </member>
        <member name="T:RoomService.DTO.WorkSpaceDateDTO">
            <summary>
            WorkSpace Id and Date>Time in ISO 8601 format
            Used from API requests
            </summary>
        </member>
        <member name="P:RoomService.DTO.WorkSpaceDateDTO.WorkSpaceId">
            <summary>
            Id of WorkSpace
            </summary>
        </member>
        <member name="P:RoomService.DTO.WorkSpaceDateDTO.Date">
            <summary>
            ISO 8601 formatted DateTime
            </summary>
        </member>
        <member name="T:RoomService.DTO.WorkSpaceReservationDTO">
            <summary>
            WorkSpace Reservation DTO has id instead of string and less metadata
            <see cref="T:RoomService.Models.WorkSpaceReservation"/>
            </summary>
        </member>
        <member name="P:RoomService.DTO.WorkSpaceReservationDTO.ReservationId">
            <summary>
            ReservationId of the asker
            </summary>
        </member>
        <member name="P:RoomService.DTO.WorkSpaceReservationDTO.WorkSpace">
            <summary>
            The workspace of the reservation
            </summary>
        </member>
        <member name="P:RoomService.DTO.WorkSpaceReservationDTO.Interval">
            <summary>
            WorkSpace Reservation Interval time
            </summary>
        </member>
        <member name="P:RoomService.DTO.WorkSpaceReservationDTO.Users">
            <summary>
            Number of users with a reservation in the Workspace during Interval time
            </summary>
        </member>
        <member name="T:RoomService.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="M:RoomService.Program.Main(System.String[])">
            <summary>
            Main method
            </summary>
            <param name="args">Run args</param>
        </member>
        <member name="M:RoomService.Program.CreateHostBuilder(System.String[])">
            <summary>
            Create Host builder
            </summary>
            <param name="args">program args</param>
            <returns>Host builder</returns>
        </member>
        <member name="T:RoomService.Services.AbstractMongoCrudService`1">
            <summary>
            Abstract crud service use driver for ops in mongo repo
            </summary>
            <typeparam name="TModel">The context model type</typeparam>
        </member>
        <member name="P:RoomService.Services.AbstractMongoCrudService`1.Database">
            <summary>
            Database Connection
            </summary>
        </member>
        <member name="P:RoomService.Services.AbstractMongoCrudService`1.Collection">
            <summary>
            The mongo repository
            </summary>
        </member>
        <member name="M:RoomService.Services.AbstractMongoCrudService`1.Init(RoomService.Settings.IMongoSettings,System.String)">
            <summary>
            Init the mongo client and database
            @TODO: build specific settings class instead of passing everything
            </summary>
            <param name="settings">The mongo settings file</param>
            <param name="baseCollection">The service collection context</param>
        </member>
        <member name="M:RoomService.Services.AbstractMongoCrudService`1.Create(`0)">
            <summary>
            Create op
            </summary>
            <param name="model">TModel type class</param>
        </member>
        <member name="M:RoomService.Services.AbstractMongoCrudService`1.Delete(System.String)">
            <summary>
            Delete op
            </summary>
            <param name="id">The id : 24 string to delete</param>
            <returns>True : success, false : else</returns>
        </member>
        <member name="M:RoomService.Services.AbstractMongoCrudService`1.Read(System.String)">
            <summary>
            get op
            </summary>
            <param name="id">The id : 24 string to Read</param>
            <returns>the object maching the id, eventually default</returns>
        </member>
        <member name="M:RoomService.Services.AbstractMongoCrudService`1.Update(System.String,`0)">
            <summary>
            update op
            </summary>
            <param name="id">Target resource id</param>
            <param name="newModel">TModel type object</param>
            <returns>True : success, false : else</returns>
        </member>
        <member name="M:RoomService.Services.AbstractMongoCrudService`1.GetAll">
            <summary>
            get all op
            @TODO pagination or result limit
            </summary>
            <returns>ICollection (List) eventually 0 sized</returns>
        </member>
        <member name="T:RoomService.Services.AccessControlService">
            <summary>
            Implementa la logica di sicurezza per le crud
            @TODO alcune query tipo IsAdmin donvebbero essere salvate come cache nei Claim per ottimizzare le performance
            @TODO fare access control service divisi per responsabilitá
            </summary>
        </member>
        <member name="F:RoomService.Services.AccessControlService._userService">
            <summary>
            The User service dependency
            </summary>
        </member>
        <member name="F:RoomService.Services.AccessControlService._reservationService">
            <summary>
            The reservation service dependency
            </summary>
        </member>
        <member name="M:RoomService.Services.AccessControlService.#ctor(RoomService.Services.UserService,RoomService.Services.ReservationService)">
            <summary>
            Constructor
            </summary>
            <param name="userService">Injected user service</param>
            <param name="reservationService">Injected reservation service</param>
        </member>
        <member name="M:RoomService.Services.AccessControlService.IsAdmin(System.String)">
            <summary>
            Is Admin check
            </summary>
            <param name="id">User to check</param>
            <returns>Bool true : Is Adim</returns>
        </member>
        <member name="M:RoomService.Services.AccessControlService.IsAuth(System.String)">
            <summary>
            Is Auth check
            </summary>
            <param name="id">User to check</param>
            <returns>Bool true : Is Authed</returns>
        </member>
        <member name="M:RoomService.Services.AccessControlService.IsOwner``2(System.String,System.String,``0@)">
            <summary>
            Determinate is an user is Owner of a resource
            </summary>
            <typeparam name="TService">The service type that will handle the check</typeparam>
            <typeparam name="TModel">The model type</typeparam>
            <param name="id">The user id</param>
            <param name="tid">The targeted resource id</param>
            <param name="_service">The service that has access to the resource</param>
            <returns>Bool true : Is Owner</returns>
        </member>
        <member name="M:RoomService.Services.AccessControlService.IsOwner``1(System.String,``0)">
            <summary>
            Is Owner Overload
            <seealso cref="M:RoomService.Services.AccessControlService.IsOwner``2(System.String,System.String,``0@)"/>
            </summary>
            <typeparam name="TModel">The resource type</typeparam>
            <param name="id">the user id</param>
            <param name="model">the entire resouce</param>
            <returns>Bool : true Is Owner</returns>
        </member>
        <member name="M:RoomService.Services.AccessControlService.CanCreateUser(System.String,RoomService.Models.UserModel)">
            <summary>
            User creation check
            Need to be admin or unregistered
            And only admin can create admins
            </summary>
            <param name="id">User id</param>
            <param name="model">User Model</param>
            <returns>True : user can be created</returns>
        </member>
        <member name="M:RoomService.Services.AccessControlService.CanCreateReservation(System.String,RoomService.Models.Reservation)">
            <summary>
            Can create reservation check
            Rely on <see cref="M:RoomService.Services.ReservationService.CanCreateReservation(RoomService.Models.Reservation)"/>
            </summary>
            <param name="id">Creator user Id</param>
            <param name="model">The reservation model</param>
            <returns>True : can create</returns>
        </member>
        <member name="T:RoomService.Services.BuildingService">
            <summary>
            Service for Building collection crud ops in abstract
            </summary>
        </member>
        <member name="F:RoomService.Services.BuildingService._workSpaceRepo">
            <summary>
            Needed repository for aggregation operations with WorkSpace
            </summary>
        </member>
        <member name="F:RoomService.Services.BuildingService._workSpaceReservationRepo">
            <summary>
            Needed repository for aggregation operations with WorkSpaceReservation
            </summary>
        </member>
        <member name="F:RoomService.Services.BuildingService._reservationRepo">
            <summary>
            Needed repository for aggregation operations with Reservation
            </summary>
        </member>
        <member name="M:RoomService.Services.BuildingService.#ctor(RoomService.Settings.IRoomServiceMongoSettings)">
            <summary>
            Constructor
            </summary>
            <param name="settings">The mongo settings wrapper</param>
        </member>
        <member name="M:RoomService.Services.BuildingService.GetBuildingWorkSpace(System.String)">
            <summary>
            Join Building and WorkSpaces
            </summary>
            <param name="id">The building id</param>
            <returns>BuildingWorkSpaceDTO the building and his WorkSpaces</returns>
        </member>
        <member name="M:RoomService.Services.BuildingService.GetAvailableBuildingWorkSpace(System.String,System.String,RoomService.Models.Types.DeltaTime)">
            <summary>
            Find all available workspaces inside a building for an user in chosen DeltaTime interval
            </summary>
            <param name="rid">The user id</param>
            <param name="id">The building id</param>
            <param name="interval">The time interval</param>
            <returns>The building and a IEnumerable of found workspaces</returns>
        </member>
        <member name="M:RoomService.Services.BuildingService.AvailabilityHeper(RoomService.Models.Reservation)">
            <summary>
            Helper class for WorkSpace availability Checks
            Use a reservation model as tester for simulate the reservation
            Logic is similar to <seealso cref="M:RoomService.Services.ReservationService.Create(RoomService.Models.Reservation)"/>
            </summary>
            <param name="model">Reservation model used as tester</param>
            <returns>Bool true : could create false : else</returns>
        </member>
        <member name="M:RoomService.Services.BuildingService.CanCreateReservation(RoomService.Models.Reservation)">
            <summary>
            Performs controls for Reservation insert availability
            @TODO: move into utility class
            @TODO: return specific error description
            @TODO: add null handling and safe code controls
            </summary>
            <param name="model">The model Reservation to check creation availability</param>
            <returns>Bool : true can create : false can't</returns>
        </member>
        <member name="M:RoomService.Services.BuildingService.DataInsersects(System.String,System.String,System.String,System.String)">
            <summary>
            Determinate if two datetime intervals in isostring overlaps
            @TODO move into an utility class
            </summary>
            <param name="start">First datetime interval start</param>
            <param name="end">First datetime interval end</param>
            <param name="secStart">Second datetime interval start</param>
            <param name="secEnd">Second datetime interval end</param>
            <returns>True : data intersects false : else</returns>
        </member>
        <member name="M:RoomService.Services.BuildingService.Delete(System.String)">
            <summary>
            Delete building chains a delete of all workspace inside it all reservations inside workspaces and 
            all workspacereservations of the workspace
            </summary>
            <param name="id">The building id</param>
            <returns>Delete result</returns>
        </member>
        <member name="M:RoomService.Services.BuildingService.FreeWorkSpace(System.String)">
            <summary>
            Delete all refs Reservation and WorkSpaceReservation from the workspace
            </summary>
            <param name="id">The target WorkSpace</param>
            <returns>Delete result instance in mongo driver</returns>
        </member>
        <member name="M:RoomService.Services.BuildingService.DeleteWorkSpaceReservationByWorkSpaceId(System.String)">
            <summary>
            Delete reservations of targeted WorkSpace
            </summary>
            <param name="id">The target WorkSpace Id</param>
            <returns>Delete result instance in mongo driver</returns>
        </member>
        <member name="M:RoomService.Services.BuildingService.DeleteReservationByWorkSpaceId(System.String)">
            <summary>
            Delete reservations of targeted WorkSpace
            </summary>
            <param name="id">The target WorkSpace Id</param>
            <returns>Delete result instance in mongo driver</returns>
        </member>
        <member name="T:RoomService.Services.FavouritesService">
            <summary>
            Service for Favourite collection crud ops in abstract
            </summary>
        </member>
        <member name="M:RoomService.Services.FavouritesService.#ctor(RoomService.Settings.IRoomServiceMongoSettings)">
            <summary>
            Constructor
            </summary>
            <param name="settings">Mongo settings file wrapper</param>
        </member>
        <member name="T:RoomService.Services.IMongoCrudService`1">
            <summary>
            Interface for Crud service
            </summary>
            <typeparam name="TModel">The target model type</typeparam>
        </member>
        <member name="M:RoomService.Services.IMongoCrudService`1.Init(RoomService.Settings.IMongoSettings,System.String)">
            <summary>
            Service init for base service generic initialization
            </summary>
            <param name="settings">The mongo settings wrapper</param>
            <param name="baseCollection">The base collection of the service</param>
        </member>
        <member name="M:RoomService.Services.IMongoCrudService`1.Create(`0)">
            <summary>
            Generic crud create implementation
            </summary>
            <param name="model">The data to create</param>
            <returns>The created data and is location (Id) in the database</returns>
        </member>
        <member name="M:RoomService.Services.IMongoCrudService`1.Delete(System.String)">
            <summary>
            Generic crud create implementation
            </summary>
            <param name="id">The target id To Delete</param>
            <returns>Delete result</returns>
        </member>
        <member name="M:RoomService.Services.IMongoCrudService`1.Read(System.String)">
            <summary>
            Generic crud Read implementation
            </summary>
            <param name="id">The resource to read</param>
            <returns>The resource found in database</returns>
        </member>
        <member name="M:RoomService.Services.IMongoCrudService`1.Update(System.String,`0)">
            <summary>
            Generic crud Update implementation
            </summary>
            <param name="id">The resource id</param>
            <param name="newModel">The new data</param>
            <returns></returns>
        </member>
        <member name="M:RoomService.Services.IMongoCrudService`1.GetAll">
            <summary>
            Read all
            </summary>
            <returns>All data in the path</returns>
        </member>
        <member name="T:RoomService.Services.ReservationService">
            <summary>
            Service for Reservation collection crud ops in abstract
            </summary>
        </member>
        <member name="F:RoomService.Services.ReservationService._workSpaceRepo">
            <summary>
            Required external aggregation repository _workSpaceRepo is the WorkSpace collection repo
            Main used in <see cref="T:RoomService.Services.WorkSpaceService"/>
            </summary>
        </member>
        <member name="F:RoomService.Services.ReservationService._workSpaceReservationRepo">
            <summary>
            Required external aggregation repository _workSpaceReservations is the WorkSpaceReservations collection repo
            In this repo are stored the Workspace by date reservations collected is also a main repo of this service.
            </summary>
        </member>
        <member name="M:RoomService.Services.ReservationService.#ctor(RoomService.Settings.IRoomServiceMongoSettings)">
            <summary>
            Constructor gets the mongo settings from DI
            </summary>
            <param name="settings">The mongo database settings</param>
        </member>
        <member name="M:RoomService.Services.ReservationService.GetUserReservations(System.String)">
            <summary>
            Return all reservations of chosen user
            </summary>
            <param name="id">Ref user id</param>
            <returns>IEnumerable of reservations of selected user</returns>
        </member>
        <member name="M:RoomService.Services.ReservationService.GetUserReservationsAndWorkSpaces(System.String)">
            <summary>
            Execute a join of 3 tables for return util data
            Uses the reservation as "middleman" for join workspace and availability in reservation interval
            </summary>
            <param name="id">The user Id</param>
            <returns>Joined reservation workspace and availability in the interval DeltaTine of the requested user reservations</returns>
        </member>
        <member name="M:RoomService.Services.ReservationService.FindOnGoindReservationIdByWorkSpaceAndUserIds(System.String,System.String)">
            <summary>
            Find Reservation with ongoing status for an user
            </summary>
            <param name="WorkSpaceId">The id of the workspace</param>
            <param name="UserId">The user to check</param>
            <returns>nullable string of eventually found reservation</returns>
        </member>
        <member name="M:RoomService.Services.ReservationService.Create(RoomService.Models.Reservation)">
            <summary>
            Create a reservation
            Could chain a reservation time split
            </summary>
            <param name="model">The reservation model to add</param>
            <returns>Last created reservation or empty if fails</returns>
        </member>
        <member name="M:RoomService.Services.ReservationService.CreationHelper(RoomService.Models.Reservation)">
            <summary>
            Helper class for reservation creation
            </summary>
            <param name="model">The new reservation Template</param>
            <returns>The created Reservation</returns>
        </member>
        <member name="M:RoomService.Services.ReservationService.Delete(System.String)">
            <summary>
            Base delete override for ref cascade deletion
            </summary>
            <param name="id">The target reservation id to delete</param>
            <returns>Mongo delete result instance</returns>
        </member>
        <member name="M:RoomService.Services.ReservationService.CheckIn(System.String,RoomService.DTO.WorkSpaceDateDTO)">
            <summary>
            Execute a check-in add
            </summary>
            <param name="id">The reservation id</param>
            <param name="data">The timestamp of check-in</param>
            <returns>Bool : true successful checked-in false : else</returns>
        </member>
        <member name="M:RoomService.Services.ReservationService.CheckOut(System.String,RoomService.DTO.WorkSpaceDateDTO)">
            <summary>
            Execute a check-out add
            </summary>
            <param name="id">The reservation id</param>
            <param name="data">The timestamp of checkout</param>
            <returns>Bool : true successful checked-out false : else</returns>
        </member>
        <member name="M:RoomService.Services.ReservationService.GetReservationMeta(System.String)">
            <summary>
            Get aggregated reservation target WorkSpace and WorkSpaceReservations in the same time Interval
            </summary>
            <param name="id">The reservation Id</param>
            <returns>Reservation Joined WorkSpace and UserCounts inside</returns>
        </member>
        <member name="M:RoomService.Services.ReservationService.CanCreateReservation(RoomService.Models.Reservation)">
            <summary>
            Performs controls for Reservation insert availability
            @TODO: move into utility class
            @TODO: return specific error description
            @TODO: add null handling and safe code controls
            </summary>
            <param name="model">The model Reservation to check creation availability</param>
            <returns>Bool : true can create : false can't</returns>
        </member>
        <member name="M:RoomService.Services.ReservationService.DataInsersects(System.String,System.String,System.String,System.String)">
            <summary>
            Determinate if two datetime intervals in isostring overlaps
            @TODO move into an utility class
            </summary>
            <param name="start">First datetime interval start</param>
            <param name="end">First datetime interval end</param>
            <param name="secStart">Second datetime interval start</param>
            <param name="secEnd">Second datetime interval end</param>
            <returns>True : data intersects false : else</returns>
        </member>
        <member name="T:RoomService.Services.ReservationUpdaterService">
            <summary>
            Update reservation statuses based on calendar/timer
            The tasks runs foreach time hook of type RESSTATUSUPDATE in settings
            </summary>
        </member>
        <member name="F:RoomService.Services.ReservationUpdaterService._reservationRepo">
            <summary>
            Required collection _reservationRepo is where reservations to update are stored
            </summary>
        </member>
        <member name="F:RoomService.Services.ReservationUpdaterService._serverTasks">
            <summary>
            The server task array got from settings
            </summary>
        </member>
        <member name="F:RoomService.Services.ReservationUpdaterService._serverTaskUtils">
            <summary>
            Utility service for timer based task creation got from DI
            </summary>
        </member>
        <member name="F:RoomService.Services.ReservationUpdaterService._goingStatuses">
            <summary>
            _goingStatuses hashset helper 
            @TODO use settings or database
            </summary>
        </member>
        <member name="M:RoomService.Services.ReservationUpdaterService.#ctor(RoomService.Settings.IRoomServiceMongoSettings,RoomService.Settings.IAppSettings,RoomService.Utils.ServerTaskUtils)">
            <summary>
            Constructor use DI for required resources
            </summary>
            <param name="mongoSettings">The database settings data</param>
            <param name="appSettings">The app settings data</param>
            <param name="serverTaskService"></param>
        </member>
        <member name="M:RoomService.Services.ReservationUpdaterService.InitTasks(System.DateTime)">
            <summary>
            Init tasks from array
            </summary>
            <param name="time">The ref start time</param>
            <returns>Bool : true success status</returns>
        </member>
        <member name="M:RoomService.Services.ReservationUpdaterService.LastJob">
            <summary>
            This delegate is used for restart tasks for next day
            </summary>
            <returns>New task init result</returns>
        </member>
        <member name="M:RoomService.Services.ReservationUpdaterService.UpdateReservation">
            <summary>
            This delegate is used for update Reservation statuses on database
            </summary>
            <returns>Bool : true success/complete</returns>
        </member>
        <member name="T:RoomService.Services.UserService">
            <summary>
            Service for User collection crud ops in abstract
            </summary>
        </member>
        <member name="F:RoomService.Services.UserService._sectet">
            <summary>
            The token secret got by settings
            </summary>
        </member>
        <member name="F:RoomService.Services.UserService._TokenLifetime">
            <summary>
            The token lifetime got by settings
            </summary>
        </member>
        <member name="F:RoomService.Services.UserService._cryptProvider">
            <summary>
            The required crypt provider helper service for password decryption/encryption got by DI
            </summary>
        </member>
        <member name="F:RoomService.Services.UserService._reservationRepo">
            <summary>
            Needed repository for aggregation operations with Reservations
            </summary>
        </member>
        <member name="F:RoomService.Services.UserService._workSpaceReservationRepo">
            <summary>
            Needed repository for aggregation operations with WorkSpace reservation
            </summary>
        </member>
        <member name="F:RoomService.Services.UserService._favouriteRepo">
            <summary>
            Needed repository for aggregation operations with Favourites
            </summary>
        </member>
        <member name="F:RoomService.Services.UserService._workSpaceRepo">
            <summary>
            Needed repository for aggregation operations with WorkSpace
            </summary>
        </member>
        <member name="M:RoomService.Services.UserService.#ctor(RoomService.Settings.IRoomServiceMongoSettings,RoomService.Settings.IAppSettings,RoomService.Utils.CrypProvider)">
            <summary>
            Constructor sets the DI
            </summary>
            <param name="settings">The required settings</param>
            <param name="appSettings">The whole app settings wrapper</param>
            <param name="cryptProvider">The utility service for password encrypt</param>
        </member>
        <member name="M:RoomService.Services.UserService.Register(RoomService.Models.UserModel)">
            <summary>
            Execute an user creation
            </summary>
            <param name="model">The user data to insert</param>
            <returns>The created user in database and his token</returns>
        </member>
        <member name="M:RoomService.Services.UserService.Create(RoomService.Models.UserModel)">
            <summary>
            Create an user
            </summary>
            <param name="model">The user data to insert</param>
            <returns>The created user without token and password</returns>
        </member>
        <member name="M:RoomService.Services.UserService.Update(System.String,RoomService.Models.UserModel)">
            <summary>
            Update an user
            </summary>
            <param name="id">Target User id</param>
            <param name="newModel">Ner User data</param>
            <returns>Replace result class by mongo driver</returns>
        </member>
        <member name="M:RoomService.Services.UserService.Login(RoomService.DTO.AuthDTO)">
            <summary>
            Execute the login Method
            </summary>
            <param name="authData">The simplified user model AuthData has only username and password</param>
            <returns>The created user with token</returns>
        </member>
        <member name="M:RoomService.Services.UserService.Delete(System.String)">
            <summary>
            Delete an user
            Could chain a reservation delete and a favourites delete
            </summary>
            <param name="id">the user to delete</param>
            <returns>The delete result mongo driver class</returns>
        </member>
        <member name="M:RoomService.Services.UserService.DeleteAllUserReservationById(System.String)">
            <summary>
            Delete user Reservation
            Chains a seat free in ref WorkSpaceReservation
            </summary>
            <param name="id">The user Id</param>
            <returns>The delete result mongo driver instance</returns>
        </member>
        <member name="M:RoomService.Services.UserService.FindByUserName(System.String)">
            <summary>
            Find an user by his username
            </summary>
            <remarks>Username is a key in the database</remarks>
            <param name="username">The string of the user to find</param>
            <returns>The found User Model</returns>
        </member>
        <member name="M:RoomService.Services.UserService.GetUserFavouriteWorkSpace(System.String)">
            <summary>
            Gets the favourite WorkSpace of a target user
            </summary>
            <param name="id">The target user id</param>
            <returns>And user and a collection of his favourites WorkSpace</returns>
        </member>
        <member name="M:RoomService.Services.UserService.GetUserInWorkSpace(System.String)">
            <summary>
            Look for all users inside a WorkSpace using their checkin status
            </summary>
            <param name="id">The WorkSpace id</param>
            <returns>IEnumerable of found users</returns>
        </member>
        <member name="M:RoomService.Services.UserService.FindUserLocationById(System.String)">
            <summary>
            Uses the reservation as "middleman" for join workspace and availability in reservation interval
            </summary>
            <param name="id">The user Id</param>
            <returns>Joined reservation workspace and availability in the interval DeltaTime of the requested user reservations</returns>
        </member>
        <member name="T:RoomService.Services.WorkSpaceService">
            <summary>
            Service for WorSpace collection crud ops in abstract
            </summary>
        </member>
        <member name="F:RoomService.Services.WorkSpaceService._reservationRepo">
            <summary>
            Needed repository for aggregation operations with Reservation
            </summary>
        </member>
        <member name="F:RoomService.Services.WorkSpaceService._workSpaceReservationRepo">
            <summary>
            Needed repository for aggregation Workspace reservation repository for time reservations on a workspace
            </summary>
        </member>
        <member name="M:RoomService.Services.WorkSpaceService.#ctor(RoomService.Settings.IRoomServiceMongoSettings)">
            <summary>
            Constructor sets the DI
            </summary>
            <param name="settings">The required settings</param>
        </member>
        <member name="M:RoomService.Services.WorkSpaceService.DeleteByBuildingId(System.String)">
            <summary>
            Get deleted by building Id
            </summary>
            <param name="id">the building Id</param>
            <returns>Delete result instance in mongo driver</returns>
        </member>
        <member name="M:RoomService.Services.WorkSpaceService.Delete(System.String)">
            <summary>
            Delete a workspace
            Chains a cascade delete of workspace reservation e reservation targeting the workspace
            </summary>
            <param name="id">The target Id</param>
            <returns>Delete result instance in mongo driver</returns>
        </member>
        <member name="M:RoomService.Services.WorkSpaceService.FreeWorkSpace(System.String)">
            <summary>
            Delete all refs Reservation and WorkSpaceReservation from the workspace
            </summary>
            <param name="id">The target WorkSpace</param>
            <returns>Delete result instance in mongo driver</returns>
        </member>
        <member name="M:RoomService.Services.WorkSpaceService.DeleteWorkSpaceReservationByWorkSpaceId(System.String)">
            <summary>
            Delete reservations of targeted WorkSpace
            </summary>
            <param name="id">The target WorkSpace Id</param>
            <returns>Delete result instance in mongo driver</returns>
        </member>
        <member name="M:RoomService.Services.WorkSpaceService.DeleteReservationByWorkSpaceId(System.String)">
            <summary>
            Delete reservations of targeted WorkSpace
            </summary>
            <param name="id">The target WorkSpace Id</param>
            <returns>Delete result instance in mongo driver</returns>
        </member>
        <member name="T:RoomService.Settings.AppSettings">
            <summary>
            Global App Settings class wrapper for config json data
            </summary>
        </member>
        <member name="P:RoomService.Settings.AppSettings.Secret">
            <summary>
            Used secret for Token Generation
            </summary>
        </member>
        <member name="P:RoomService.Settings.AppSettings.TokenDuration">
            <summary>
            Token expire time duration
            </summary>
        </member>
        <member name="P:RoomService.Settings.AppSettings.PasswordHash">
            <summary>
            Password Hash string (PasswordHash)
            </summary>
        </member>
        <member name="P:RoomService.Settings.AppSettings.SaltKey">
            <summary>
            Password Hash Salt Key
            </summary>
        </member>
        <member name="P:RoomService.Settings.AppSettings.VIKey">
            <summary>
            Password Hash VI Key
            </summary>
        </member>
        <member name="P:RoomService.Settings.AppSettings.ServerTasks">
            <summary>
            Clock based Server Tasks Array
            </summary>
        </member>
        <member name="T:RoomService.Settings.IAppSettings">
            <summary>
            Compatibility Interface for App Settings
            <see cref="T:RoomService.Settings.AppSettings"/>
            </summary>
        </member>
        <member name="P:RoomService.Settings.IAppSettings.Secret">
            <summary>
            Secret
            </summary>
        </member>
        <member name="P:RoomService.Settings.IAppSettings.PasswordHash">
            <summary>
            Password Hash String (PasswordHash)
            </summary>
        </member>
        <member name="P:RoomService.Settings.IAppSettings.SaltKey">
            <summary>
            Password Hash Salt Key
            </summary>
        </member>
        <member name="P:RoomService.Settings.IAppSettings.VIKey">
            <summary>
            Password Hash VI Key
            </summary>
        </member>
        <member name="P:RoomService.Settings.IAppSettings.TokenDuration">
            <summary>
            Password Hash VI Key
            </summary>
        </member>
        <member name="P:RoomService.Settings.IAppSettings.ServerTasks">
            <summary>
            Clock based Server Tasks Array
            </summary>
        </member>
        <member name="T:RoomService.Settings.IMongoSettings">
            <summary>
            Interface for Mongo database connection
            <see cref="T:RoomService.Settings.RoomServiceMongoSettings"/>
            </summary>
        </member>
        <member name="P:RoomService.Settings.IMongoSettings.ConnectionString">
            <summary>
            Connection
            </summary>
        </member>
        <member name="P:RoomService.Settings.IMongoSettings.DatabaseName">
            <summary>
            Name of the Database where to connect
            </summary>
        </member>
        <member name="T:RoomService.Settings.IRoomServiceMongoSettings">
            <summary>
            Interface for specific mongo database RoomService avable collections
            <see cref="T:RoomService.Settings.RoomServiceMongoSettings"/>
            </summary>
        </member>
        <member name="P:RoomService.Settings.IRoomServiceMongoSettings.UserCollection">
            <summary>
            Collection of User
            </summary>
        </member>
        <member name="P:RoomService.Settings.IRoomServiceMongoSettings.BuildingCollection">
            <summary>
            Collection of Building
            </summary>
        </member>
        <member name="P:RoomService.Settings.IRoomServiceMongoSettings.ReservationCollection">
            <summary>
            Collection of Reservation
            </summary>
        </member>
        <member name="P:RoomService.Settings.IRoomServiceMongoSettings.WorkSpaceCollection">
            <summary>
            Collection of WorkSpace
            </summary>
        </member>
        <member name="P:RoomService.Settings.IRoomServiceMongoSettings.QRMapCollection">
            <summary>
            Collection of QRMap
            </summary>
        </member>
        <member name="P:RoomService.Settings.IRoomServiceMongoSettings.FavouritesCollection">
            <summary>
            Collection of Favourites
            </summary>
        </member>
        <member name="P:RoomService.Settings.IRoomServiceMongoSettings.WorkSpaceReservationCollection">
            <summary>
            Collection of WorkSpaceReservation
            </summary>
        </member>
        <member name="T:RoomService.Settings.RoomServiceMongoSettings">
            <summary>
            Settings for RoomService mongo connection app
            </summary>
        </member>
        <member name="P:RoomService.Settings.RoomServiceMongoSettings.UserCollection">
            <summary>
            Connection string for UserCollection
            </summary>
        </member>
        <member name="P:RoomService.Settings.RoomServiceMongoSettings.ConnectionString">
            <summary>
            Connection string for mongoclient
            </summary>
        </member>
        <member name="P:RoomService.Settings.RoomServiceMongoSettings.DatabaseName">
            <summary>
            Connection string for database
            </summary>
        </member>
        <member name="P:RoomService.Settings.RoomServiceMongoSettings.BuildingCollection">
            <summary>
            Connection string for BuildingCollection
            </summary>
        </member>
        <member name="P:RoomService.Settings.RoomServiceMongoSettings.ReservationCollection">
            <summary>
            Connection string for ReservationCollection
            </summary>
        </member>
        <member name="P:RoomService.Settings.RoomServiceMongoSettings.WorkSpaceCollection">
            <summary>
            Connection string for WorkSpaceCollection
            </summary>
        </member>
        <member name="P:RoomService.Settings.RoomServiceMongoSettings.QRMapCollection">
            <summary>
            /// Connection string for QRMapCollection
            </summary>
        </member>
        <member name="P:RoomService.Settings.RoomServiceMongoSettings.FavouritesCollection">
            <summary>
            Connection string for FavouritesCollection
            </summary>
        </member>
        <member name="P:RoomService.Settings.RoomServiceMongoSettings.WorkSpaceReservationCollection">
            <summary>
            Connection string for WorkSpaceReservationCollection
            </summary>
        </member>
        <member name="T:RoomService.Startup">
            <summary>
            Startup class
            </summary>
        </member>
        <member name="M:RoomService.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Startup class constructor
            </summary>
            <param name="configuration">The app configuration</param>
        </member>
        <member name="P:RoomService.Startup.Configuration">
            <summary>
            Configuration data for utils
            </summary>
        </member>
        <member name="M:RoomService.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            ConfigUtils helper will contain Services for type
            </summary>
            <param name="services">The service collection</param>
        </member>
        <member name="M:RoomService.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app">Application builder</param>
            <param name="env">Envinorment</param>
        </member>
        <member name="T:RoomService.Utils.ConfigUtils">
            <summary>
            Utility class for lighten Starup.cs and group app configs
            </summary>
        </member>
        <member name="P:RoomService.Utils.ConfigUtils.ServiceCollection">
            <summary>
            App services collection
            </summary>
        </member>
        <member name="P:RoomService.Utils.ConfigUtils.Configuration">
            <summary>
            App Configuration files
            </summary>
        </member>
        <member name="M:RoomService.Utils.ConfigUtils.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="services">The app service collection container</param>
            <param name="configuration">The app configuration files</param>
        </member>
        <member name="M:RoomService.Utils.ConfigUtils.ConfigureApp">
            <summary>
            Whole app config
            </summary>
        </member>
        <member name="M:RoomService.Utils.ConfigUtils.ConfigureSettings">
            <summary>
            Settings file config
            </summary>
        </member>
        <member name="M:RoomService.Utils.ConfigUtils.ConfigureJwt(System.String)">
            <summary>
            Jwt configuration
            </summary>
        </member>
        <member name="M:RoomService.Utils.ConfigUtils.GenerateSingletons">
            <summary>
            Services adder as singletons
            </summary>
        </member>
        <member name="T:RoomService.Utils.CrypProvider">
            <summary>
            Utility service for string encryption
            </summary>
        </member>
        <member name="F:RoomService.Utils.CrypProvider.PasswordHash">
            <summary>
            Password Hash
            </summary>
        </member>
        <member name="F:RoomService.Utils.CrypProvider.SaltKey">
            <summary>
            Salt key
            </summary>
        </member>
        <member name="F:RoomService.Utils.CrypProvider.VIKey">
            <summary>
            VI Key
            </summary>
        </member>
        <member name="M:RoomService.Utils.CrypProvider.#ctor(RoomService.Settings.IAppSettings)">
            <summary>
            Constructor
            Should use RSA for encrypt keys like SSL?
            </summary>
            <param name="settings">The settings where keys are stored</param>
        </member>
        <member name="M:RoomService.Utils.CrypProvider.Encrypt(System.String)">
            <summary>
            Encrypt a text
            </summary>
            <param name="plainText">The text in UTF8 Encoding to encrypt</param>
            <returns>The encryped text result in ASCII base64 Encoding</returns>
        </member>
        <member name="M:RoomService.Utils.CrypProvider.Decrypt(System.String)">
            <summary>
            Decrypt a text
            </summary>
            <param name="encryptedText">Text to decrypt in ASCII base64 string encoding</param>
            <returns>The UTF8 encoding decryped string</returns>
        </member>
        <member name="T:RoomService.Utils.DeltaTimeExtensions">
            <summary>
            Exstensin methods for manage DeltaTime Class
            </summary>
        </member>
        <member name="M:RoomService.Utils.DeltaTimeExtensions.IsValid(RoomService.Models.Types.DeltaTime)">
            <summary>
            Validator for DeltaTime class
            <para>
                Delta time valid definition is a delta time that has EndTime attribute 
                Bigger than StartTime attribute, the two values should be string "o" (ISO 8601) formatted DateTime classes
            </para>
            </summary>
            <param name="deltaTime">Target to validate</param>
            <returns>The bool that indicates the valid status</returns>
        </member>
        <member name="M:RoomService.Utils.DeltaTimeExtensions.IsFuture(RoomService.Models.Types.DeltaTime)">
            <summary>
            Determinate if a Deltatime start is in the future compared to current time
            </summary>
            <param name="deltaTime">This item to check</param>
            <returns>Bool true : the start time is in the future</returns>
        </member>
        <member name="M:RoomService.Utils.DeltaTimeExtensions.Clamp(RoomService.Models.Types.DeltaTime)">
            <summary>
            Clamp DeltaTime attributes inside nearests hours of the day to hook
            </summary>
            <param name="delta">The target deltatime</param>
            <returns>A new DeltaTime with clamped attributes</returns>
        </member>
        <member name="M:RoomService.Utils.DeltaTimeExtensions.First(RoomService.Models.Types.DeltaTime)">
            <summary>
            Get the first DeltaTime Interval inside a DeltaTime to split into defined units
            </summary>
            <param name="delta">The DeltaTime to iterate</param>
            <returns>The first DeltaTime day interval</returns>
        </member>
        <member name="M:RoomService.Utils.DeltaTimeExtensions.Next(RoomService.Models.Types.DeltaTime,System.DateTime)">
            <summary>
            Get the next DeltaTime Interval inside a Deltatime to split into defined units
            </summary>
            <param name="delta">The DeltaTime to iterate</param>
            <param name="last">DateTime placeholder for end iteration</param>
            <returns>The next DeltaTime day interval</returns>
        </member>
        <member name="M:RoomService.Utils.DeltaTimeExtensions.HourDistance(System.DateTime,System.DateTime)">
            <summary>
            Return the linear distance between two Dates expressed in hours
            </summary>
            <param name="a">First date</param>
            <param name="b">Second date</param>
            <returns></returns>
        </member>
        <member name="T:RoomService.Utils.ReservationExtensions">
            <summary>
            Extension for Reservation class
            </summary>
        </member>
        <member name="M:RoomService.Utils.ReservationExtensions.Clone(RoomService.Models.Reservation)">
            <summary>
            Make a full clone of the target class
            </summary>
            <param name="target">The target to copy</param>
            <returns>A new copy of Reservation targhet</returns>
        </member>
        <member name="T:RoomService.Utils.UserExtensions">
            <summary>
            User class Exstensions
            </summary>
        </member>
        <member name="M:RoomService.Utils.UserExtensions.WithoutPasswords(System.Collections.Generic.IEnumerable{RoomService.Models.UserModel})">
            <summary>
            A pipe that removes the password from an users IEnumerable
            </summary>
            <param name="users">The user IEnumerable</param>
            <returns>The modified users IEnumerable</returns>
        </member>
        <member name="M:RoomService.Utils.UserExtensions.WithoutTokens(System.Collections.Generic.IEnumerable{RoomService.Models.UserModel})">
            <summary>
            A pipe that removes the tokens from an users IEnumerable
            @TODO: Delete -- token are now ignored by BSON and NewSoftJson
            </summary>
            <param name="users">The user IEnumerable</param>
            <returns>The modified users IEnumerable</returns>
        </member>
        <member name="M:RoomService.Utils.UserExtensions.WithoutPassword(RoomService.Models.UserModel)">
            <summary>
            A pipe that removes the password from an user
            </summary>
            <param name="user">The user</param>
            <returns>The modified user</returns>
        </member>
        <member name="M:RoomService.Utils.UserExtensions.WithoutToken(RoomService.Models.UserModel)">
            <summary>
            A pipe that removes the token from an user
            @TODO: Delete -- token are now ignored by BSON and NewSoftJson 
            </summary>
            <param name="user">The user</param>
            <returns>The modified user</returns>
        </member>
        <member name="M:RoomService.Utils.UserExtensions.IsValid(RoomService.Models.UserModel)">
            <summary>
            Validator for UserModel class
            <para>
                UserModel valid definition is a user that has username and password matching the respective regular expressions
            </para>
            </summary>
            <param name="user">Target to validate</param>
            <returns>The bool that indicates the valid status</returns>
        </member>
        <member name="T:RoomService.Utils.ResponseTypes">
            <summary>
            Used http response enum
            </summary>
        </member>
        <member name="F:RoomService.Utils.ResponseTypes.Ok">
            <summary>
            Success status 200
            </summary>
        </member>
        <member name="F:RoomService.Utils.ResponseTypes.NotFound">
            <summary>
            No resouce 404
            </summary>
        </member>
        <member name="F:RoomService.Utils.ResponseTypes.BadRequest">
            <summary>
            Bad input 400
            </summary>
        </member>
        <member name="F:RoomService.Utils.ResponseTypes.Conflict">
            <summary>
            Conflict used for valid input but invalid context 409
            </summary>
        </member>
        <member name="F:RoomService.Utils.ResponseTypes.Forbid">
            <summary>
            Insufficient permissions 403
            </summary>
        </member>
        <member name="T:RoomService.Utils.ResponseMeta">
            <summary>
            Metatada response archetype
            </summary>
        </member>
        <member name="P:RoomService.Utils.ResponseMeta.Type">
            <summary>
            Http response type
            <see cref="T:RoomService.Utils.ResponseTypes"/>
            </summary>
        </member>
        <member name="P:RoomService.Utils.ResponseMeta.Message">
            <summary>
            Message string for client 
            </summary>
        </member>
        <member name="T:RoomService.Utils.ResponseWrapper`1">
            <summary>
            Container for dynamic add response meta to service data
            </summary>
            <typeparam name="TModel">Base type of response</typeparam>
        </member>
        <member name="P:RoomService.Utils.ResponseWrapper`1.Meta">
            <summary>
            The response meta data
            </summary>
        </member>
        <member name="P:RoomService.Utils.ResponseWrapper`1.Payload">
            <summary>
            The payload data
            </summary>
        </member>
        <member name="T:RoomService.Utils.ServerTaskUtils">
            <summary>
            Utility Service for server Timer Based Tasks 
            </summary>
        </member>
        <member name="M:RoomService.Utils.ServerTaskUtils.CreateTimeBasedServerTask(System.DateTime,System.Func{System.Boolean})">
            <summary>
            Create a task that runs at time param 
            </summary>
            <param name="time">When should execute the operation</param>
            <param name="op">The delegate operation to run</param>
        </member>
        <member name="M:RoomService.Utils.ServerTaskUtils.RaiseEvent(System.Object,System.Timers.ElapsedEventArgs,System.Func{System.Boolean})">
            <summary>
            Event raiser wrapper
            </summary>
            <param name="o">Timer object</param>
            <param name="e">Timer args</param>
            <param name="op">The operation to run</param>
        </member>
        <member name="T:RoomService.Utils.TaskTypes">
            <summary>
            Task types enum definition
            @TODO: Should be moved in a new file
            </summary>
        </member>
        <member name="F:RoomService.Utils.TaskTypes.RESSTATUSUPDATE">
            <summary>
            Status for update task selection
            </summary>
        </member>
        <member name="F:RoomService.Utils.TaskTypes.RESNOTIFIER">
            <summary>
            Status for Notification tasks selection
            </summary>
        </member>
        <member name="T:RoomService.Utils.ServerTimeTaskData">
            <summary>
            Server Time Task Data for settings propose
            @TODO: Should be moved in a new file
            </summary>
        </member>
        <member name="P:RoomService.Utils.ServerTimeTaskData.Name">
            <summary>
            Task name
            </summary>
        </member>
        <member name="P:RoomService.Utils.ServerTimeTaskData.Description">
            <summary>
            Task description
            </summary>
        </member>
        <member name="P:RoomService.Utils.ServerTimeTaskData.TaskType">
            <summary>
            Task type
            </summary>
        </member>
        <member name="P:RoomService.Utils.ServerTimeTaskData.Hour">
            <summary>
            Hour of the day when task will run
            </summary>
        </member>
    </members>
</doc>
